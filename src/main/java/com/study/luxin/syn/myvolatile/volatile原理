#### volatile关键字实现的能力
1. 可见性(在一个线程写完一个数据后,在此之后的其他线程读该数据,立马能读到最新的数据)
2. 顺序性(禁止指令重拍)

volatile
	特点
		轻量级synchronized
		保证共享变量的可见性
		不会引起线程上下文的切换和调度
	实现
		缓存锁定
			声明volatile,会向cpu发出lock指令,将便令所在的缓存行,写回内存,操作完就写回
			缓存一致性
				缓存写回导致其他缓存无效
					下次访问相同的内存地址的时,强制执行缓存行填充
				阻止同时修改同一个数据在两个缓存行(相当于写互斥锁)
	适用场景
		使用条件
			对变量的操作不依赖当前值
			变量不包含在其他变量的不变
				在读完volatile变量后,接下来的操作包含了volatile变量,就说明变量包含在不变式中了
			变量自己没有前后的依赖关系
----			
> happens-before 
volatile变量规则：这是一条比较重要的规则，它标志着volatile保证了线程可见性。
通俗点讲就是如果一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作一定是happens-before读操作的。

这能保证在写之后的读,都能读到最新的,即也是 在线程写的时候,发生在写之后的读,都阻塞